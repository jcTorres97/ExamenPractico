using Domain.AspNet;
using Domain.Auditoria;
using Domain.Objetos;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Repository.Context.Auditoria;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Repository.Context
{
    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {

        }
        public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public virtual DbSet<ApplicationRole> ApplicationRoles { get; set; }
        public virtual DbSet<Audit> AuditsChanges { get; set; }
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<Sucursal> Sucursales { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Inventario> Inventarios { get; set; }
        public virtual DbSet<Bitacora> Bitacoras { get; set; }
        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            builder.Entity<Persona>().HasOne(x => x.ApplicationUser).WithOne(x => x.Persona).HasForeignKey<Persona>(x => x.IdApplicationUser);

            builder.Entity<ApplicationUser>().HasQueryFilter(x => !x.IsDeleted);
            builder.Entity<Persona>().HasQueryFilter(x => !x.IsDeleted);
            builder.Entity<Sucursal>().HasQueryFilter(x => !x.IsDeleted);
            builder.Entity<Producto>().HasQueryFilter(x => !x.IsDeleted);
            builder.Entity<Inventario>().HasQueryFilter(x => !x.IsDeleted);
        }
        public async override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }
        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (VerificarEntry(entry))
                {
                    continue;
                }

                var auditEntry = new AuditEntry(entry)
                {
                    TableName = entry.Metadata.GetTableName()
                };
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    string propertyName = property.Metadata.Name;
                    switch (VerificarTemporalPrimarioState(property, entry))
                    {
                        case 1:
                            // value will be generated by the database, get the value after saving
                            auditEntry.TemporaryProperties.Add(property);
                            continue;
                        case 2:
                            auditEntry.KeyValues[propertyName] = property.CurrentValue;
                            continue;
                        case 3:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            entry.CurrentValues["IsDeleted"] = false;
                            break;
                        case 4:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            entry.CurrentValues["IsDeleted"] = true;
                            entry.State = EntityState.Modified;
                            break;
                        case 5:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }

            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }
        private int VerificarTemporalPrimarioState(PropertyEntry property, EntityEntry entry)
        {
            int respuesta = 0;
            //retorna 1 si es temporal
            if (property.IsTemporary)
            {
                respuesta = 1;
            }
            //retorna 2 en caso de ser primerio
            else if (property.Metadata.IsPrimaryKey())
            {
                respuesta = 2;
            }
            else
            {
                switch (entry.State)
                {
                    //retorna 3 en caso de ser Añadido
                    case EntityState.Added:
                        respuesta = 3;
                        break;
                    //retorna 4 en caso de ser Eliminado
                    case EntityState.Deleted:
                        respuesta = 4;
                        break;
                    //retorna 5 en caso de ser Modificado
                    case EntityState.Modified:
                        respuesta = 5;
                        break;
                    default:
                        break;
                }
            }
            return respuesta;
        }

        private bool VerificarEntry(EntityEntry entry)
        {
            return (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged);
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                AuditsChanges.Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }

    }
}
